---
description: 
globs: 
alwaysApply: true
---
# JavaScriptインフォグラフィック制作プロジェクト ルール

このプロジェクトは、JavaScriptの基本を学ぶためのインフォグラフィックHTMLを作成することを目的としています。以下のルールに従って開発を進めてください。

## 1. 全般

- **言語**: コメントやドキュメント、UIのテキストは、原則として日本語を使用します。
- **バージョン管理**: Gitを使用し、コミットメッセージは変更内容が分かりやすいように記述してください。（例: `feat: 変数セクションのインフォグラフィックを追加`）
- **ファイル構成**:
    - `index.html`: HTMLの構造を記述します。
    - `css/style.css`: スタイルを記述します。
    - `js/script.js`: JavaScriptのロジックを記述します。
    - `assets/images/`: 画像ファイルを格納します。

## 2. コーディング規約

### HTML
- セマンティックタグを適切に使用し、文書構造を明確にしてください。
- `alt`属性など、アクセシビリティに配慮した記述を心がけてください。

### CSS
- BEM（Block, Element, Modifier）の命名規則を推奨します。
- レスポンシブデザインに対応し、PCでもスマートフォンでも見やすいレイアウトを作成してください。
- アニメーションは学習の妨げにならないよう、控えめかつ効果的に使用してください。

### JavaScript
- **基本方針**: 学習者が理解しやすいよう、まずはライブラリやフレームワークに頼らず、Vanilla JSで実装します。
- **変数名・関数名**:
    - JavaScriptの概念を示す場合は、英語のまま使用します。（例: `variable`, `function`, `array`）
    - 具体的なデータを示す場合は、それが何を表すか分かりやすい日本語のローマ字表記や英単語を使用します。（例: `kosu` (個数), `price` (価格)）
- **コメント**:
    - 各機能や複雑な処理には、その役割や意図を説明するコメントを必ず記述してください。
    - 学習者がつまずきやすいポイントには、特に丁寧な解説を加えるようにしてください。
- **フォーマット**: Prettierを導入し、コードフォーマットを自動で統一します。

## 3. デザイン

- **視覚的魅力**: インフォグラフィックとして、情報を視覚的に分かりやすく表現してください。図やイラストを効果的に活用しましょう。
- **配色**: 学習の集中を妨げない、一貫性のあるカラーパレットを使用してください。
- **フォント**: 可読性の高いフォントを選んでください。

## 4. ツール

- **エディタ**: Cursorを使用します。
- **コードフォーマッター**: Prettier
- **リンター**: ESLint (導入を推奨)

---

これらのルールは、プロジェクトの進行に合わせて見直すことができます。 

---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
--- 
あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
<!-- このテンプレート変数はユーザーの入力プロンプトに自動置換されます -->
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>
   - 主要なタスクを簡潔に要約してください。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討してください。  
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要な要件と制約を特定してください。
   - 潜在的な課題をリストアップしてください。
   - タスク実行のための具体的なステップを詳細に列挙してください。
   - それらのステップの最適な実行順序を決定してください。
   
   ### 重複実装の防止
   実装前に以下の確認を行ってください：
   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複するAPIエンドポイント
   - 共通化可能な処理の特定

   このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
   </タスク分析>

2. タスクの実行

【基本方針】
- 各タスクは必ずファイルの編集と Git による変更管理（ステージング＆コミット）をセットで実施してください。
- 作業は「1ファイル1コミット」を基本とし、複数ファイルの変更が必要な場合でも、変更内容ごとにコミットを分けるか、各ファイル単位でのコミットを原則とします。

【具体的な手順】
1. 【ファイル編集】
   - 必要な変更を対象ファイルに対して実施してください。

2. 【Git 操作（各ファイル毎）】
   - 編集完了後、必ず以下の Git 操作を実施してください：
     - `git add <対象ファイル>`  
       （対象ファイルの変更をステージングする）
     - `git commit -m "編集完了: <対象ファイル> - <変更内容の概要>"`  
       （変更内容がわかる具体的なメッセージでコミットする）

3. 【進捗報告】
   - 各ファイルの Git 操作完了後、対象ファイル名とコミットハッシュ（または概要）を含む簡潔な進捗レポートを提出してください。

【注意点】
- **ディレクトリ構造の遵守**  
  適切なディレクトリ・ファイル構成を維持し、プロジェクト全体の一貫性を確保すること。
- **命名規則・コードスタイルの統一**  
  プロジェクトで定めた命名規則およびコードスタイルに従い、可読性・保守性を高めること。
- **共通処理の配置**  
  重複コードは共通ライブラリや適切な場所にまとめ、再利用性の高い設計を心がけること。
- **変更の確認**  
  各ファイルの編集と Git 操作後、実際にコミットが反映されているか、変更内容を確認してから次のステップに進むこと。
---

4. 品質管理と問題対応
   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

5. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。

---

6. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   ```markdown
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
   ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]
   ```

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

---

# 技術スタック

@technologystack.md

---

# ディレクトリ構成

@directorystructure.md

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。 